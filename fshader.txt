#version 430

in vec4 Position;
in vec3 Normal;
in vec2 TexCoord;

// Select functionality
subroutine vec4    RenderPassType();
subroutine uniform RenderPassType RenderPass;

struct LightInfo {
    vec4 Position;  // Light position in eye coords
    vec3 Intensity; // Light intensity
};
uniform LightInfo Light;

struct MaterialInfo {
    vec4  Ka;        // Ambient  reflectivity
    vec4  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};
uniform MaterialInfo Material;

layout (location = 0) out vec4 FragColor;

vec3 diffuse( )
{
  vec3 s = normalize( Light.Position.xyz - Position.xyz );
  //vec3 n = normalize(Normal);
  vec3 n = Normal;

  return
    Light.Intensity * ( Material.Ka.rgb +
        Material.Kd.rgb * max( dot(s, n), 0.0 ) );

}

subroutine (RenderPassType)
vec4 pass1() {
    return vec4(diffuse(),1.0);
}

// Bright-pass filter (write to BlurTex1)
subroutine( RenderPassType )
vec4 pass2()
{
/*
    vec4 val = texture(HdrTex, TexCoord);    
    if( luminance(val.rgb) > LumThresh )
    {
        return val;
    }
    else
    {
        return vec4(0.0);
    }
*/
    return vec4(1.0, 0.0, 0.0, 1.0);
}

void main()
{    
    FragColor = RenderPass();    
}
